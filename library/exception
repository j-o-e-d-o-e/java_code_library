Exception



- 'try' contains critical code able to throw an exception
- 'catch' contains exception-handling
- 'finally' contains an optional statement which gets always executed
- 'IllegalArgumentException' doesn't require a throw-declaration in the head of the method nor a class definition, since it's predefined
- 'throws' operates basically like a 'return'-statement, that's also why 'throw' needs normally to be declared in the method head
- 'try', 'catch' & 'finally' each create a separate scope. To use the same object in all three blocks, it should be created outside/before the 'try'-block

EXAMPLE
import java.util.Scanner;

@SuppressWarnings("serial")
class MyEx extends Exception {// eigene Subklasse von Exception
    MyEx() { // Konstruktor mit eigener Message:
        super("Du musst Dich für eine Seite entscheiden. Versuche es nochmal!");
    }
}

public class Test {
    static void satanAbschwoeren(Scanner s) throws MyEx { // Exception im Methodenkopf angeben
        System.out.println("DER EXORZIST fragt: 'Willst Du Satan abschwören?' (j/n)");
        String x = s.nextLine();
        if (x.equals("j")) {
            System.out.println("DU antwortest: 'JA!'");
            System.out.println("DER EXORZIST erwidert: 'Sehr gut, mein verlorenes Kind!'");
        } else if (x.equals("n")) {
            System.out.println("DU antwortest: 'NEIN!'");
            System.out.println("DER EXORZIST erwidert: 'Du bist ein böses Kind, das gefällt mir!'");
        } else {
            throw new MyEx(); // in diesem Fall wird die Ausnahme 'geworfen' an 'catch'
        }
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        boolean flag = false;
        while (!flag) { // solange while, bis gültiger User-Input
            try {
                satanAbschwoeren(s); // ohne Objekt, da statische Methode
                flag = true;
            } catch (MyEx e) {
                System.out.println(e.getMessage()); // die im Konstruktor angegebene
                                                    //  Message anzeigen
            }
        }
        s.close();
    }
}
----------------------------------------------
alternatively, using IllegalArgumentException:
import java.util.Scanner;

public class Test {
    // Exception im Methodenkopf wird nicht benötigt
    static void satanAbschwoeren(Scanner s) {
        System.out.println("DER EXORZIST fragt: 'Willst Du Satan abschwören?' (j/n)");
        String x = s.nextLine();
        if (x.equals("j")) {
            System.out.println("DU antwortest: 'JA!'");
            System.out.println("DER EXORZIST erwidert: 'Sehr gut, mein verlorenes Kind!'");
        } else if (x.equals("n")) {
            System.out.println("DU antwortest: 'NEIN!'");
            System.out.println("DER EXORZIST erwidert: 'Du bist ein böses Kind, das gefällt mir!'");
        } else {
            // in diesem Fall wird Ausnahme 'geworfen' an 'catch'
            throw new IllegalArgumentException("Du musst Dich für eine Seite entscheiden. Versuche es nochmal!");

        }
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        try {
            boolean flag = false;
            while (!flag) { // solange while, bis gültiger User-Input
                try {
                    satanAbschwoeren(s); // ohne Objekt, da statische Methode
                    flag = true;
                } catch (IllegalArgumentException e) {
                    // die im Konstruktor angegebene Message anzeigen
                    System.out.println(e.getMessage());
                }
            }
        } finally {
            s.close();
        }
    }
}

#try/catch/finally
