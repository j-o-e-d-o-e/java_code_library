generics->wildcard



- represents an unknown type
    - mainly used with collections and specified bounds/constraints
(1) upper bound: <? extends superclass>
    - accepts superclass and all its subtypes
(2) lower bound: <? super subclass>
    - accepts subclass and all its supertypes (including Object)

- SEE ALSO
    - geeksforgeeks.org/wildcards-in-java/

EXAMPLE
(1)
static double sum(List<? extends Number> ls) {
    return ls.stream().mapToDouble(Number::doubleValue).sum();
}
List<Integer> l1 = List.of(4, 5, 6, 7);
System.out.printf("Sum = %.2f%n", sum(l1)); // 22.00
List<Double> l2 = List.of(4.1, 5.1, 6.1);
System.out.printf("Sum = %.2f%n", sum(l2)); // 15.30

(2)
static class Audio {}
static class Analog extends Audio {}
static class Digital extends Audio {}

public static void add(List<? super Analog> ls) {
    ls.add(new Analog());
}
List<Audio> audio = new ArrayList<>();
add(audio);
List<Analog> analog = new ArrayList<>();
add(analog);
List<Digital> digital = new ArrayList<>();
// add(digital); // unsupported
