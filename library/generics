generics



- allow for different (parameterized) types and still ensure type safety
    - type parameter cannot be a primitive
(1) bounds/constraints
    - <T extends superclass>: superclass and all its subtypes
    - multiple bounds
        - e.g. List<T extends Number & Comparable>: list of Number and its subtypes that implement Comparable
        - classes declared before interfaces (here: Number before Comparable)
(2) generic methods
    - <T> T name(T t): type parameter (here: <T>) before return type (here: T)
    - multiple type params separated by commas within diamond operator

- see also
    - entry: comparable
    - /exercism/java/binary-search-tree
    - baeldung.com/java-generics

EXAMPLE
(1)
static class Data<T extends Comparable<T>> {
    private final T val;

    Data(T val) {
        this.val = val;
    }
    boolean isLess(T o) {
        return val.compareTo(o) < 0;
    }
}
Data<String> d1 = new Data<>("1");
boolean b1 = d1.isLess("2");  // b1 = true
Data<Integer> d2 = new Data<>(2);
boolean b2 = d2.isLess(1);    // b2 = false

(2)
static public <T extends Comparable<T>> Boolean isLess(List<T> ls1, List<T> ls2) {
    if (ls1.size() != ls2.size()) return null;
    return IntStream.range(0, ls1.size()).anyMatch(i -> ls1.get(i).compareTo(ls2.get(i)) < 0);
}
Boolean b1 = isLess(List.of(1, 1), List.of(1, 2));          // b1 = true
Boolean b2 = isLess(List.of("1", "2"), List.of("1", "2"));  // b2 = false
Boolean b3 = isLess(List.of('1', '3'), List.of('1', '2'));  // b3 = false
Boolean b4 = isLess(List.of(1, 1), List.of(1));             // b4 = null
