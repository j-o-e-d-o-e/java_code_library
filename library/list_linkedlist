List->LinkedList

data structure

- doubly-linked list implementation of List<T> and Queue<T> interfaces
- methods (additionally to list and queue)
(1) add
    - addFirst(T elem) inserts elem at the beginning 
    - offerFirst(T elem) inserts elem at beginnging and returns boolean
    - addLast(T elem) appends elem to the end
    - offerLast(T elem) inserts elem at the end and returns boolean
    - push(T elem) inserts elem at the front
(2) retrieve
    - getFirst() returns 1st elem (head)
        - if list is empty, throws Exception
    - getLast() returns last elem (tail)
        - if list is empty, throws Exception
    - peekFirst() returns 1stt elem or null if list is empty
    - peekLast() returns last elem or null if list is empty
(3) delete
    - removeFirst() removes and returns 1st elem
        - if list is empty, throws Exception
    - removeLast() removes and returns last elem
        - if list is empty, throws Exception
    - removeFirstOccurence(Object o) removes 1st occurrence of o and returns true if list contained o
        - if not found, list is unchanged
    - removeLastOccurence(Object o) removes last occurence and returns true/false
        - if not found, list is unchanged
    - pollFirst() removes and returns 1st elem or null if list is empty
    - pollLast() removes and returns last elem or null if list is empty
    - pop() returns 1st elem
        - if list is empty, throws Exception
(4) iterate
    - descendingIterator() returns Iterator<T> over elem in reverse order

EXAMPLE
(3)
LinkedList<Integer> a = new LinkedList<>(List.of(1, 2, 3));
boolean b = a.removeFirstOccurrence(1); // true, a = [2, 3]
b = a.removeLastOccurrence(1); // false
