method::reference



- <obj>::<method>
- allows for converting a method call into an instance of a @FunctionalInterface
- can only replace a single method lambda expression (which replaces an @FunctionalInterface)
- instead of using an anonymous class, one can use a lambda expression
- and if this lambda just calls one method, one can use a method reference instead
- method references passes no args
- four types of method references (lambda ==>> method reference):
    - method reference to a static method: Class::staticMethod (1)
    - reference to an instance method of a particular object: instance::instanceMethod (2)
    - reference to an instance method of an arbitrary obj of a particular type: Class:instanceMethod (3)
    - method reference to a constructor: Class::new (4)

EXAMPLE
// (1) STATIC METHOD
List<String> names = Arrays.asList("joe doe", "mary jane");
names.forEach(System.out::println);

// (2) INSTANCE METHOD OF A PARTICULAR OBJ
private static class MyComparator {
    public int compare(final Integer a, final Integer b) {
        return a.compareTo(b);
    }
MyComparator myComparator = new MyComparator();
List<Integer> list = Arrays.asList(8, 3, 1, 5, 6, 2, 7, 9, 4);
Collections.sort(list, myComparator::compare);

// (3) INSTANCE METHOD OF AN ARBITRARY OBJ
public class Person {
    String name;
    Person(String name) {
        this.name = name;
    }
    void printName() {
        System.out.println(name);
    }
}
List<Person> people = Arrays.asList(new Person("dan"), new Person("laura"));
people.forEach(Person::printName);

// (4) REFERENCE TO CONSTRUCTOR
List<Integer> numbers = Arrays.asList(4, 9, 16, 25, 36);
List<Double> squaredNumbers = findSquareRoot(numbers, Integer::new);
static List<Double> findSquareRoot(List<Integer> list, Function<Integer, Integer> f) {
    List<Double> result = new ArrayList<Double>();
    list.forEach(x -> result.add(Math.sqrt(f.apply((Integer) x))));
    return result;
}
