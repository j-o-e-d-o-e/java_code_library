stream



- provices a set of elements in a sequential manner
- computes elements on demand, never stores them
- supports aggreagate operations like: filter, map, limit, reduce, find, match
- Collection-interface has two methods to generate streams: stream() and parallelStream()

EXAMPLE
public class Streams {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);

        // MAP: get list of unique squares
        List<Integer> squaresList = numbers.stream().map(i -> i * i).distinct().collect(Collectors.toList());
        System.out.println(squaresList);

        // FILTER: get list
        List<Integer> filter = numbers.stream().filter(num -> num < 3).collect(Collectors.toList());
        System.out.println(filter);

        // FILTER: get count
        int count = (int) numbers.stream().filter(num -> num < 4).count();
        System.out.println(count);

        // LIMIT: reduce size of stream
        numbers.stream().limit(3).forEach(System.out::println);

        // SORTED: sort list
        List<Integer> sorted = numbers.stream().sorted().collect(Collectors.toList());
        System.out.println(sorted);
    }
}
