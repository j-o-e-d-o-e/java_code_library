Stream

sequential data structure

- sequence of elems supporting sequential and parallel aggregate operations
(1) static methods of Stream
    - of(T... vals) returns stream with vals
    - empty() returns empty stream
    - concat(Stream<T> a, Stream<T> b) returns concatenation of a and b
    - iterate(T seed, Predicate<T> hasNext, UnaryOperator<T> next) returns ordered stream
        - seed: initial elem
        - hasNext: applied to each elem to determine when stream terminates (optional)
            - if not given, returns infinite stream
        - next: applied to prev elem to produce a new elem
    - generate(Supplier<T> s) returns infinite, unordered stream where each elem is generated by s
    - builder() returns Stream.Builder<T> for a Stream<T>
- methods on Stream<T>-obj
(2) intermediate (return new stream)
    - filtering
        - filter(Predicate<T> pred) returns stream consisting only of elems that match pred
        - dropWhile(Predicate<T> pred) removes all elems that match pred until an elem does not match
            - from that point on, it takes all remaining elems
        - takeWhile(Predicate<T> pred) takes all elems that match pred until an elem does not match
            - from that point on, it removes all remaining elems
    - mapping
        - map(Function<T, R> mapper) applies mapper to each elem
            - specializations for primitives: int, double, long, e.g.
                - mapToInt(ToIntFunction<T> mapper) returns IntStream
        - flatMap(Function<T, Stream<R>> mapper) maps each elem to many and flattens new stream
            - mapper: applied to each elem and returns stream of new vals
            - specializations for primitives: int, double, long, e.g.
                - flatMapToInt(Function<T, IntStream> mapper)
        - mapMulti(BiConsumer<T, Consumer<R>> mapper) maps each elem to many and flattens new stream
            - mapper accepts an elem and a consumer that accepts replacement elems
            - specializations for primites: int, double, long, e.g.
                - mapMultiToInt(BiConsumer<T, IntConsumer> mapper)
            - unlike flatMap(), avoids creating new Stream<T> instance for each elem
            - invocation requires type witness, e.g. <String>mapMulti(...)
    - misc
        - distinct() returns stream consisting of unique elems only
        - skip(long n) discards the first n elems of this stream
        - limit(long n) discards all elems after nth elem
        - sorted(Comparator<T> comp) sorts according to comp
            - comp: optional; if not given, sorts by natural order (if possible)
        - peek(Consumer<T> action) applies action on each elem
            - mainly for debugging purposes
(3) terminal
    - returns nothing
        - forEach(Consumer<T> action) performs action for each elem
        - forEachOrdered(Consumer<T> action) guarantees to maintain the order of this
    - returns single val
        - reduce(U identity, BiFunction<U, T, U> accumulator, BinaryOperator<U> combiner)
            - identity: initial val (optional)
            - accumulator: incorporates next elem into result
            - combiner: combines two vals; useful for parrallel execution (optional)
        - min(Comparator<T> comp) returns min according to c
        - max(Comparator<T> comp) returns max according to c
        - count() returns num of elems in this
        - findFirst() returns Optional<T> of 1st elem
        - findAny() is free to select any elem in this
    - returns something
        - collect(Collector<T, A, R> c) returns result of mutable reduction using c
        - collect(Supplier<R> supplier, BiConsumer<R, T> accumulator, BiConsumer<R, R> combiner)
            - supplier: creates a new mutable result container
            - accumulator: folds an elem into a result container
            - combiner: accepts two partial result containers and folds elems from 2nd container into 1st container
        - toList() returns immutable List<T> containing all elems (may include null vals)
        - toArray() returns Object[]
(4) check (terminal)
    - allMatch(Predicate<T> pred) returns true if pred holds true for all elems
    - anyMatch(Predicate<T> pred) returns true if pred holds true for any elem
    - noneMatch(Predicate<T> pred) returns true if pred is false for all elems

EXAMPLE
(1)
Stream<Integer> s1 = Stream.of(1, 2, 3);
Stream<Integer> s2 = Stream.iterate(4, i -> i < 7, i -> i + 1);
Stream<Integer> s = Stream.concat(s1, s2);
s.forEach(i -> System.out.printf("%d ", i));    // 1 2 3 4 5 6

(2)
Stream<Integer> si = Stream.of(1, 2, 3);
List<Integer> lsi = si.dropWhile(n -> n % 2 == 1).toList(); // [2, 3]

DoubleStream sd = Stream.of(1, 2).mapToDouble(i -> i + i / 10d);
sd.forEach(d -> System.out.printf("%.2f ", d)); // 1.10 2.20

Stream<String> a = Stream.of("a", "b");
List<String> lsa = a.flatMap(str -> Stream.of(str + 1, str + "2"))
        .toList();  // lsa = [a1, a2, b1, b2]

Stream<String> b = Stream.of("a", "b");
List<String> lsb = b.<String>mapMulti((str, c) -> {
    c.accept(str + 1);
    c.accept(str + 2);
}).toList();        // lsb = [a1, a2, b1, b2]

(3)
Stream<Integer> s = Stream.of(3, 2, 1);
Integer i = s.reduce(601, (res, elem) -> res + elem * 10 + 2); // i == 667

StringBuilder res = IntStream.rangeClosed(97, 121)
        .collect(() -> new StringBuilder(), (sb, e) -> sb.appendCodePoint(e), (sb1, sb2) -> sb1.append(sb2));
        // .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append);
        // abcdefghijklmnopqrstuvwxy
