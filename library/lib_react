lib->reactive



extension of the ReactiveX (Rx) project
    - aims to provide reactive (event-based) concepts to various languages
    - lib 'RxJava 2' via maven/gradle
        - e.g. implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
(1) Observable
    - represents source of data and emits items
    - creation, e.g.
        - Observable.just(T item) returns Observable from one or multiple entities
        - Observerable.fromArray(T... items) returns Observable from given array
    - intermediate, e.g.
        - map(Function<T, R> mapper) transforms items to be emitted
        - scan(R initialValue, BiFunction<R, T, R> accumulator) allows to carry forward state from event to event
        - filter(Predicate<T> pred)
    - terminal, e.g.
        - subscribe(Consumer<T> onNext, Consumer<Throwable> onError, Action onComplete, Consumer<Disposable> onSubscribe)
            - subscribes consumer/observer and emits its items
(2) Observer
    - subcribes/listens to observable and consumes its items
    - structure
        - OnNext: called each time a new event is published
        - OnError: called when exception is thrown (optional)
        - OnCompleted: when complete (optional)
(3) Subject
    - acts as a bridge/proxy
    - abstract class Subject<T> extends Observable<T> implements Observer<T>
        - observer and observable at the same time
        - as an observer, it can subscribe to multiple observables
        - as an observable, it can re-emit items and emit new ones
    - four types
        - AsyncSubject: emits only the last value emitted by the source Observable
        - BehaviorSubject: begins by emitting the item most recently emitted by the source
        - PublishSubject: emits only items that are emitted the source to the time of the subscription
        - ReplaySubject: emits all of the items that were emitted by the source

- SEE ALSO
    - reactivex.io/documentation
    - /exercism/java/hangman
    - vogella.com/tutorials/RxJava/article.html
    - tutorialspoint.com/rxjava/index.htm

EXAMPLE
(1)
record Data<T>(T data) {}

static String res = "";
Observable<Data<String>> obs = Observable.just(new Data<>("some data"), new Data<>("more data"));
Disposable dispo = obs.subscribe(
        s -> res += s.data + ", ",  // OnNext
        Throwable::printStackTrace, // OnError
        () -> res += "completed."   // OnCompleted
);
if (dispo.isDisposed()) System.out.println(res); // some data, more data, completed.
(2)
Observable.fromArray(new String[]{"a", "b", "c"})
        .map(String::toUpperCase)
        .subscribe(System.out::print); // ABC

static int count;
Observable.fromArray(new String[]{"a", "b", "c"})
        .scan(new StringBuilder(), StringBuilder::append)
        .subscribe(sb -> System.out.print(sb + String.valueOf(count++))); // 0a1ab2abc3

Observable.just(1, 2, 3).filter(i -> (i % 2 == 1))
        .subscribe(System.out::print); // 13
(3)
Subject<String> subject = ReplaySubject.create();
