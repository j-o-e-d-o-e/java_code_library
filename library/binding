binding



- for methods:
    - their static & dynamic types are considered
    - during compilation, the corresponding signature is defined (static)
    - during runtime, java looks up the most specified method in the hierarchy according to the previously defined signature (dynamic)
- for attributes:
    - only their static type is considered

EXAMPLE
/*
 * 'c' has static type 'Test' & dynamic type 'InnerClass'. therefore, the
 * static is binded to 'a(Object o)'. during runtime, java looks for a
 * method with that signature starting from the dynamic type. Since
 * 'a(String s)' is not identical, java returns to 'Test' and executes the
 * method 'a(Object o)'
 */
public class Test {
    public void a(Object o) {
        System.out.print("outside");
    }

    class InnerClass extends Test {
        public void a(String s) { // to execute, change paramter-type to Object
            System.out.print("inside");
        }
    }

    public static void main(String[] args) {
        Test c = new Test().new InnerClass();
        c.a("Hallo"); // prints: outside
    }
}
-----------------
class A {
    public int x = 8;

    public int getX() {
        return x;
    }
}

class B extends A {
    public int x = 10;

    public int getX() {
        return x;
    }
}

public class Test {
    public static void main(String[] args) {
        A a = new A();
        B b = new B();
        A ab = new B();
        System.out.println(a.x); // prints: 8
        System.out.println(b.x); // prints: 10
        System.out.println(ab.x); // prints(!): 8
        System.out.println(a.getX()); // prints: 8
        System.out.println(b.getX()); // prints: 10
        System.out.println(ab.getX()); // prints(!): 10
    }
}
