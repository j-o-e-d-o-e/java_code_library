lambda->Operator

built-in funcs

- accepts arg(s) and returns val of same type
- one arity (one arg)
(1) UnaryOperator<T> accepts single arg of type T
    - apply(T arg) applies this operator to arg of type T and returns val of type T
    - andThen(Function< super R, V> after) returns composed func that first applies this and then after
    - compose(Function<V, T> before) returns composed func that first applies before and then this
    - specializations of UnaryOperator<T> for primitives: int, double, long, e.g.
        - IntUnaryOperator accepts and returns int
            - applyAsInt(int operand) applies this operator to operand
- two arity (two args)
(2) BinaryOperator<T> accepts two args of type T
    - apply(T t, T u) applies this operator to args and returns val of type T
    - andThen(Function<R, V> after) returns composed func that first applies this operator and then after
    - specializations of BinaryOperator<T, U> for primitives: int, double, long, e.g.
        - IntBinaryOperator accepts two ints and returns int
            - applyAsInt(int left, int right) applies this operator to left and right

EXAMPLE
(1)
IntUnaryOperator add10 = i -> i + 10;
int a = add10.applyAsInt(1); // 11

(2)
BinaryOperator<Set<Integer>> union = (s1, s2) -> {
    s1.addAll(s2);
    return s1;
};
var res = union.apply(new HashSet<>(Set.of(1, 2)), Set.of(3)); // res = [1, 2, 3]
