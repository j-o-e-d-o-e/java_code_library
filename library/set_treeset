Set->TreeSet

data structure

- sorted set implementation of NavigableSet<T>, SortedSet<T>
    - maintains natural order or order by comparator given to constructor
- in the following, additionally to HashSet<T>
(1) init
    - new TreeSet<>(Comparator<T> c) creates new, empty set ordered according to c
(2) retrieve
    - first() returns 1st (lowest) elem according to order
    - last() returns last (highest) elem
    - floor(T e) returns elem less than or equal to e
        - if no such elem present, returns null
    - lower(T e) returns elem less than e
    - ceiling(T e) returns elem greater than or equal to e
    - higher(T e) returns elem greater than e
    - headSet(T to) returns SortedSet<T> whose elems are strictly less than to
        - returned set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa
    - tailSet(T from) returns SortedSet<T> whose elemes are greater than or equal to from
    - subSet(T from, boolean fromInclusive, T to, boolean toInclusive) returns SortedSet<T> whose elems are in range
        - from/to: range (inclusive/exclusive)
        - fromInclusive/toInclusive: true if endpoint is to be included (optional)
(3) delete
    - pollFirst() removes and returns 1st (lowest) elem; or returns null if this set is empty
    - pollLast() removes and returns last elem
(4) iterate
    - descendingSet() returns a NavigableSet<T> in descending order
        - returned set is backed by this set
    - descendingIterator() returns Iterator<T> over elems in descending order
(5) utils
    - comparator() returns Comparator<T> of this set, if set; otherwise, null

EXAMPLE
(1)
TreeSet<Integer> a = new TreeSet<>(Comparator.reverseOrder());
a.addAll(Arrays.asList(1, 1, 3, 5));                    // a = [5, 3, 1]
(2)
var b = new TreeSet<>(Set.of(1, 3, 5));
Integer x = b.first();                                  // x = 1
Integer y = b.ceiling(2);                               // y = 3
(3)
Integer z = b.pollLast();                               // z = 5
(4)
var c = new TreeSet<>(Set.of(1, 3, 5)).descendingSet(); // c = [5, 3, 1]
