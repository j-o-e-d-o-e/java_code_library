reactive

vogella.com/tutorials/RxJava/article.html

reactive extensions (Rx)
    - external library 'RxJava 2' via maven/gradle (3)
- Observable
    - represents source of data and emits items
    - creation (1)
        - Observable.just(T item) returns Observable from one or multiple entities
        - Observerable.fromArray() returns Observable from given array
    - intermediate (2)
        - obs.map() transforms items to be emitted
        - obs.scan() allows to carry forward state from event to event
        - obs.filter()
    - final
        - obs.subsribe() subscribes consumer/observer and emits its items
    - misc
        - obs.toBlocking() converts observable 'obs' to sync
- Observer
    - listens to observerable and consumes its items
    - methods (1)
        - OnNext: called each time a new event is published
        - OnError: called when exception is thrown
        - OnCompleted: when complete

EXAMPLE
(1)
static String res = "";

public static void main(String[] args) {
    Observable<Data<String>> obs = Observable.just(
            new Data<>("some data"),
            new Data<>("more data")
    );
    // alternatively: only 'OnNext'
    // Disposable dispo = obs.subscribe(s -> res += s.data + ", ");
    Disposable dispo = obs.subscribe(
            s -> res += s.data + ", ",  // OnNext
            Throwable::printStackTrace, // OnError
            () -> res += "completed."   // OnCompleted
    );
    if (dispo.isDisposed()) System.out.println(res); // some data, more data, completed.
}

static class Data<T> {
    T data;

    Data(T data) {
        this.data = data;
    }
}
(2.1)
Observable.fromArray(new String[]{"a", "b", "c"})
        .map(String::toUpperCase)
        .subscribe(System.out::print); // ABC
(2.2)
static int count;

public static void main(String[] args) {
    Observable.fromArray(new String[]{"a", "b", "c"})
            .scan(new StringBuilder(), StringBuilder::append)
            .subscribe(sb -> System.out.print(sb + String.valueOf(count++)));
} // 0a1ab2abc3
(2.3)
Observable.just(1, 2, 3).filter(i -> (i % 2 == 1))
        .subscribe(System.out::print); // 13
(3)
<dependency>
  <groupId>io.reactivex.rxjava2</groupId>
  <artifactId>rxjava</artifactId>
  <version>2.2.12</version>
</dependency>

dependencies {
  implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
}
