Map

data structure

- unordered, unindexed iterable containing key/value-pairs
    - contains only unique keys
- implementing classes: HashMap<K, V>, TreeMap<K, V>
- methods
(1) add/update
    - put(K key, V val) adds/updates entry and returns null or previous val
        - if key is present, updates val and returns previous val
    - putIfAbsent(K key, V val) adds entry only if key is not present or its val is null
        - if key is present, returns its val
    - putAll(Map<K, V> m) adds/updates all entries from m in this map
    - compute(K key, BiFunction<K, V, V> func) updates val of key with result of func
        - for the case that key is not present, func should have a null check
    - computeIfAbsent(K key, Function<K, V> func) adds entry with given key and result of func as val
        - if func returns null, does nothing
        - useful for creating a value for a key based on the given key
    - computeIfPresent(K key, BiFunction<K, V,V> func) updates val of key with result of func
        - if func returns null, removes entry
(2) retrieve
    - get(Object key) returns val of key or null if key not present
    - getOrDefault(Object key, V default) returns val of key or default if key not present
    - size() returns number of entries in this map
(3) update
    - replace(K key, V val) updates val of key with given val if key is present and returns previous val
        - if key not present, returns null
    - replace(K key, V old, V new) updates val of key with new only if key maps to old and returns boolean
    - replaceAll(BiFunction<K, V, V> func) replaces each entry's val with the result of func on that entry
        - useful for replacing val of each entry based on its key and val
    - merge(K key, V val, BiFunction<V, V, V> func) replaces val of key with result of func if key is present
        - if key not present, adds key with given val
        - func merges previous val with given val
(4) delete
    - clear() removes all elems
    - remove(Object key) removes entry for key and returns its val if it was present
        - if key not present, returns null
    - remove(Object key, V val) removes entry for key and returns true if present
(5) iterate
    - forEach(BiConsumer<K, V> func) applies func to each entry
    - entrySet() returns a Set<Map.Entry<K, V> of the entries in this map
        - returned set is backed by the map, so changes to the map are reflected in the set, and vice-versa
    - keySet() returns a Set<K> of the keys
        - returned set is backed by the map
    - values() returns a Collection<V> of th vals
        - returned collection is backed by the map
(6) check
    - containsKey(Object key) returns true if map contains key
    - containsValue(Object val) returns true if this map maps one or more keys to val
    - equals(Object o) returns true if o is a map and both have the same mappings
    - isEmpty() returns true if this map contains no entries

- SEE ALSO
    - /exercism/java/forth

EXAMPLE
Map<String, Integer> m = new HashMap<>(Map.of("a", 1, "b", 2)); // {a=1, b=2}
(1)
m.put("c", null);           // {a=1, b=2, c=null}
m.putIfAbsent("c", 3);      // {a=1, b=2, c=3}

BiFunction<String, Integer, Integer> bi = (k, v) -> (v == null) ? 10 : v + 10;
m.compute("c", bi);         // {a=1, b=2, c=13}
m.compute("d", bi);         // {d=10, a=1, b=2, c=13}

m.computeIfAbsent("e", k -> (int) k.charAt(0)); // {a=1, b=2, c=13, d=10, e=101}
m.computeIfPresent("e", (k, v) -> null);        // {a=1, b=2, c=13, d=10}
(3)
m.replace("b", 2, 4); // {a=1, b=4, c=13, d=10}
m.replaceAll((k, v) -> k.compareTo("b") < 0 ? v: v + 10);     // {a=1, b=14, c=23, d=20}

m.merge("a", 100, Integer::sum);    // {a=11, b=14, c=23, d=20}
