lambda->functional interface



- @FunctionalInterface
    - purely informative annotation
    - interface contains single abstract method (SAM) only
        - mostly, implemented inline using lambda
    - allows to implement callback with type safety
    - bundled in java.util.function
- one arity (one arg)
(1) Function<T, R> accepts arg of type T and has return type of R
    - apply(T arg) applies this func to arg and returns val of type R (SAM to be implemented)
    - andThen(Function<R, V> after) returns composed func that first applies this func and then after
    - compose(Function<V, T> before) returns composed func that first applies before and then this func
    - specializations of Function<T, R> for primitives: int, double, long, e.g.
        (1.1) IntFunction<R> accepts arg of type int and has return type of R
        (1.2) ToIntFunction<T> accepts arg of type T and has return type of int
        (1.3) IntToDoubleFunction accepts arg of type int and has return type of double
    - Funtion.identity() returns a func that always returns its input arg (static)
- two arity (two args)
(2) BiFunction<T, U, R> accepts two args of type T and U and has return type of R
    - apply(T t, U u) applies this func to args and returns val of type R
    - andThen(Function<R, V> after) returns composed func that first applies this func and then after
    - specializations of BiFunction<T, U, R> for primitives: int, double, long, e.g.
        (2.1) ToIntBiFunction<T, U> accepts two args of type T and U and has return type of int
            - applyAsInt(T t, U u) applies this func to args and returns int

- SEE ALSO
    - /exercism/java/forth
    - baeldung.com/java-8-functional-interfaces

EXAMPLE
(1)
Function<Integer, Character> toAsciiValue = i -> (char) i.intValue();
Function<Character, Character> toLower = c -> (char) (c + 32);
Function<Integer, Character> composed = toAsciiValue.andThen(toLower);
char c = composed.apply(65); // c = 'a'
(1.1)
IntFunction<int[]> createArray = i -> {
    int[] res = new int[i];
    Arrays.fill(res, i);
    return res;
};
int[] a = createArray.apply(3); // [3, 3, 3]

(2)
BiFunction<String, Integer, char[]> toSubArray = (s, i) -> s.substring(i).toCharArray();
Function<char[], String> sortAndStringify = a -> {
    Arrays.sort(a);
    return String.valueOf(a);
};
BiFunction<String, Integer, String> composed = toSubArray.andThen(sortAndStringify);
String a = composed.apply("joe doe", 4); // a = deo
(2.1)
ToIntBiFunction<Character, Integer> toAsciiNumAndSwitchCase = (c, i) -> c - 32 * i;
int a = toAsciiNumAndSwitchCase.applyAsInt('A', -1);    // a = 97
int b = toAsciiNumAndSwitchCase.applyAsInt('a', 1);     // b = 65
