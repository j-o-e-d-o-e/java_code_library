Stream->primitive specials

Int/Double/LongStream

specializations of Stream<T> for primitives: int, double, long
(1) static methods of IntStream (additionally to Stream<T>)
    - range(int start, int end) returns IntStream from start (incl) to end (excl)
    - rangeClosed(int start, int end) returns IntStream from start (incl) to end (incl)
    - iterate(T seed, Predicate<T> hasNext, UnaryOperator<T> next)
        - allows for reversed sequence with other step-size than 1
        - see also, entry: Stream
- instance methods of IntStream
(2) intermediate
    - boxed() returns stream consisting of the elems each boxed
    - mapToObj(IntFunction<U> mapper) applies mapper to each elem and returns returns obj-valued stream
    - mapToInt(DoubleToIntFunction mapper) applies mapper to DoubleStream and returns IntStream
        - for LongStream: mapToInt(LongToIntFunction mapper)
    - mapToDouble(IntToDoubleFunction mapper) applies mapper to IntStream and returns DoubleStream
        - for LongStream: mapToDouble(LongToDoubleFunction mapper)
    - mapToLong(IntToLongFunction mapper) applies mapper to IntStream and returns LongStream
        - for DoubleStream: mapToLong(DoubleToLongFunction mapper)
    - asIntStream() returns IntStream consisting of the elem of this, converted to int
        - also for double, long: asDoubleStream(), asLongStream() 
(3) terminal
    - sum() returns sum of all elems
    - average() returns average

- SEE ALSO
    - /exercism/java/pascals-triangle (IntStream reduced to 2-dim-array)

EXAMPLE
(1)
int[] a = IntStream.iterate(5, i -> i > 0, i -> i - 2).toArray();       // a = [5, 3, 1]
(2)
IntStream b = IntStream.rangeClosed(0, 3);
OptionalDouble avg = b.asDoubleStream().map(d -> d * 1.23).average();   // avg = OptionalDouble[1.845]
