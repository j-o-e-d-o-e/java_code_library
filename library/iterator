Iterator

built-in interface

- instances which implement Iterator<T> may be returned by Collections and its subtypes
(1) Iterator<T>
    - hasNext() checks, whether this has at least one more elem
    - next() returns next elem of type T
    - remove() removes current elem from the underlying collection
        - useful to avoid ConcurrentModificationException while iterating
    - forEachRemaining(Consumer<T> action) performs action for each elem
(2) ListIterator<T> (additional methods to Iterator<T>)
    - hasPrevious() checks, whether this has a prev elem
    - previous() returns prev elem of type T
    - previousIndex() returns index of prev elem
        - does not increase the iterator's internal current elem
    - nextIndex() returns index of next elem
    - add(T e) inserts e into underlying list immediately after current elem
    - set(T e) replaces the last elem returned by next() or previous() with e

- SEE ALSO:
    - /exercism/java/zebra-puzzle
    - baeldung.com/java-iterator

EXAMPLE
(2)
List<Integer> ls = new LinkedList<>(List.of(5, 6, 7));
for (ListIterator<Integer> lit = ls.listIterator(); lit.hasNext(); ) {
    Integer n = lit.next();
    if (n < 6) lit.set(n + 1);
    else if (n == 6) lit.add(7);
    else lit.remove();
} // ls = [6, 6, 7]
