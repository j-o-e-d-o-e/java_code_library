lambda->Consumer

built-in funcs

- accepts arg(s), but returns nothing (contrary to Supplier<T>)
    - expected to operate via side-effects (unlike most other functional interfaces)
- one arity (one arg)
(1) Consumer<T> accepts single arg of type T
    - accept(T t) performs this operation on t (SAM)
    - andThen(Consumer<T> after) returns composed func that first performs this operation and then after
    - specializations of Consumer<T> for primitives: int, double, long, e.g.
        - IntConsumer accepts single int
- two arity (two args)
(2) BiConsumer<T, U> accepts two args of type T and U
    - accept(T t, U u) perfoms this operation on t and u
    - andThen(BiConsumer<T, U> after) returns composed func
    - specializations of Consumer<T> for primites: int, double, long, e.g.
        - ObjIntConsumer<T> accepts an obj and an int as args

EXAMPLE
(1)
Consumer<String[]> swap = a -> {
    String tmp = a[0];
    a[0] = a[1];
    a[1] = tmp;
};
Consumer<String[]> appendY = a -> {
    a[0] = a[0] + "y";
    a[1] = a[1] + "y";
};
Consumer<String[]> composed = swap.andThen(appendY);
String[] a = new String[]{"joe", "doe"};
composed.accept(a);
System.out.println(Arrays.toString(a)); // [doey, joey]

(2)
ObjIntConsumer<int[]> setToZero = (a, i) -> Arrays.fill(a, 0, i, 0);
int[] b = new int[]{1, 2, 3};
setToZero.accept(b, 2);
System.out.println(Arrays.toString(b)); // [0, 0, 3]
