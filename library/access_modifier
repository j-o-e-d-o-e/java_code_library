access modifier



- for classes
    - public: visible anywhere
    - default: visible only within its package
    - inner classes also allow for 'protected & 'private'
    - public class needs to be saved in its own file 'classname.java'
- for class-elements (attributes, methods & constructors)
    - public: visible where its class is visible
    - protected: visible within its package & for subclasses(if superclass is 'public' and call on subclass-typ)
    - default: visible within its package
    - private: visible only within its class
- overwritten methods are not to be narrowed(compared to their implementation in the superclass)

EXAMPLE
package a;
class K {
    // L, M & N visible
}
public class L {
    // K, M & N visible
}

package a.c;
public class M {
    // L & N visible
}

package b;
public class N {
    // L, M & P visible
}
class P {
    // L, M & N visible
}
---------------------
class A {
    public void m(int x, String y) {
        System.out.println("A: " + x + " " + y);
    }
}

class B extends A {
    public void m(int x) {
        System.out.println("B: " + x);
    }
}

class C extends A {
    public void m(String x, String y) {
        System.out.println("C: " + x + " " + y);
    }

    private void n(int x) {
        System.out.println("C: " + x);
    }
}

class D extends C {
    public void m(String x, String y) {
        System.out.println("D: " + x + " " + y);
    }
}

class E extends C {
    public void m(String x) {
        System.out.println("E: " + x);
    }

    public void n(boolean x) {
        System.out.println("E: " + x);
    }
}

class F extends E {
    public void m(int x) {
        System.out.println("F: " + x);
    }
}

class G extends E {
    public void m(String x) {
        System.out.println("G: " + x);
    }
}

public class Test {
    public static void main(String[] args) {
        C c = new C();
        E e = new E();
        F f = new F();
        G g = new G();

        g.m("hello"); // prints: G: hello
        e.m("hello"); // prints: E: hello
        g.n(true); // prints: E: true
        g.m("hello", "joerg"); // prints: C: hello joerg
        g.n(3); // incorrect: The method n(int) from the type C is not visible
        g.m(2, "times"); // prints: A: 2 times
        f.m(100); // prints: F: 100
        g.m(2); // incorrect: The method m(int, String) in the type A is not
                // applicable for the arguments (int)
        f.m(4, "you"); // prints: A: 4 you
        e.m(8); // incorrect: The method m(int, String) in the type A is not
                // applicable for the arguments (int)
        c.n(6); // incorrect: The method n(int) from the type C is not visible
    }
}
