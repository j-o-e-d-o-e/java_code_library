enumerations



- special data type that enables for a variable to be a set of predefined constants
- Common examples: compass directions(NORTH, SOUTH, EAST, WEST) & the days of the week
- Because they are constants, the names of an enum type's fields are in uppercase letters
- CONSTANT.ordinal() returns the position of this CONSTANT in the declaration (initial constant = 0)
- enum.values() returns an array containing all of the values of the 'enum' in the order they are declared. Commonly used in combination with the for-each construct to iterate over the values of an enum type


EXAMPLES
public enum Day {SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY 
}
-----------------
enum Arbeitstag {
    MONTAG, DIENSTAG, MITTWOCH, DONNERSTAG, FREITAG;

    boolean istNach(Arbeitstag tag) {
        return this.ordinal() > tag.ordinal();
    }

    boolean istVor(Arbeitstag tag) {
        return this.ordinal() < tag.ordinal();
    }

    Arbeitstag naechsterArbeitstag() {
        int morgenIndex = this.ordinal() + 1;
        if (morgenIndex == Arbeitstag.values().length)
            morgenIndex = 0;
        return Arbeitstag.values()[morgenIndex];
    }

    Arbeitstag vorherigerArbeitstag() {
        int gesternIndex = this.ordinal() - 1;
        if (gesternIndex < 0)
            gesternIndex = Arbeitstag.values().length - 1;
        return Arbeitstag.values()[gesternIndex];
    }
}

public class Test {
    public static void main(String[] args) {
        Arbeitstag a = Arbeitstag.MITTWOCH;
        System.out.println(a.istVor(Arbeitstag.MONTAG)); // prints: false
        System.out.println(a.istVor(Arbeitstag.DONNERSTAG)); // prints: true
        System.out.println(a.istNach(Arbeitstag.DIENSTAG)); // prints: true
        System.out.println(a.istNach(Arbeitstag.MITTWOCH)); // prints: false
        System.out.println(a.naechsterArbeitstag()); // prints: DONNERSTAG
        System.out.println(a.vorherigerArbeitstag()); // prints: DIENSTAG
    }
}
