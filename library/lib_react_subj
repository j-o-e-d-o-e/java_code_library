lib->reactive->subject



- acts as a bridge/proxy
- abstract class Subject<T> extends Observable<T> implements Observer<T>
    - observer and observable at the same time
    - as an observer, it can subscribe to multiple observables
    - as an observable, it can re-emit items and emit new ones
- four types
    - AsyncSubject: emits only the last value emitted by the source Observable
    - BehaviorSubject: begins by emitting the item most recently emitted by the source
    - PublishSubject: emits only items that are emitted the source to the time of the subscription
    - ReplaySubject: emits all of the items that were emitted by the source

- See ALSO
    - reactivex.io/documentation/subject.html
    - /exercism/java/hangman

EXAMPLE
Subject<String> subject = ReplaySubject.create();
